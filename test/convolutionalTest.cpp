#include "ConvolutionalEncoder.hpp"
#include "catch2/catch_all.hpp"
#include <fstream>

TEST_CASE("Convolutional Encoder") {
    ConvolutionalEncoder convolutional;
    etl::bitset<ConvolutionalEncoder::inputLength> input;
    etl::bitset<ConvolutionalEncoder::outputLength> output;
    etl::bitset<ConvolutionalEncoder::outputLength> expectedOutput;
    SECTION("Convolutional-Test no1: Zeros") {
        for (int i = 0; i < ConvolutionalEncoder::inputLength; i++) {
            input.set(i,0);
        }
        convolutional.encode(input, output);

        uint16_t errors = 0;
        for (int i = 0; i < ConvolutionalEncoder::outputLength; i++) {
            if (output[i] != 0) {
                errors += 1;
            }
        }
        CHECK(errors == 0);
    }
    SECTION("Convolutional-Test no2: Random Word") {
        input
        expectedOutput
        convolutional.encode(input, output);
        uint16_t errors = 0;
        for (int i = 0; i < ConvolutionalEncoder::outputLength; i++) {
            if (output[i] != expectedOutput[i]) {
                errors += 1;
            }
        }
            CHECK(errors == 0);
    }
}

